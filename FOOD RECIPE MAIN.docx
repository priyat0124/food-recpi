                                               FOOD RECIPE 


TEAM MEMBERS:


NAME	ROLL NUMBER
SUDHEEKSHA S	22ALR098
PRASHASHREE B	22ALR072
PRIYADHARSHINI T	22ALR073





INTRODUCTION:

The Food Recipe Full Stack Project aims to create an interesting and intuitive web application that facilitates the discovery, sharing, and organization of a large number of recipes. This project uses both front-end and back-end technologies to provide culinary connoisseurs and home chefs with a comprehensive solution. Allow patrons to browse a wide selection of recipes sorted by different cooking styles, diets, and ingredients. Allow people to contribute their own recipes, complete with images, ingredient lists, tips, and instructions. Give consumers the ability to organize their meals and save their favorite recipes with tools.



Key features:
•	User authentication and profiles: Users can establish and manage personal profiles after securely registering and logging in.
•	Advanced Search and Filters: Search recipes by name, ingredients, dietary restrictions, and more.
•	Responsive Design: Ensure the application is accessible and functional across various devices and screen sizes.
•	Nutritional Information: Calculate and display nutritional information for each recipe, including calories, macronutrients, and vitamins.
•	These data are stored in API FireBase backend.
•	Recipe Collections: Enable users to create and share collections or lists of their favorite recipes, such as “Holiday Favorites” or “Quick Weeknight Dinners.”
•	Social Sharing: Allow users to share recipes on social media platforms directly from the application.




REQUIREMENTS:

● Front-End Programming:
       1. CSS (Cascading Style Sheets): Style: Manages the web pages' style and layout, utilizing media queries, Grid, and Flexbox for responsive design.
Frameworks: For quick UI creation, use CSS frameworks like Tailwind CSS or Bootstrap. It enables programmers to style HTML elements using colors, typefaces, spacing, and positioning to produce a unified and aesthetically pleasing user experience.
      2. JavaScript: JavaScript is a potent programming language that enhances websites with dynamic behavior and interactivity. With its help, developers may manage user interactions, execute calculations, verify forms, work with HTML and CSS, and send asynchronous calls to servers.
      3. React: A well-liked JavaScript package for creating user interfaces is called React. It offers a component-based method for developing websites, enabling programmers to design reusable user interface components that automatically update in response to modifications in data. Utilizing a virtual Document Object Model, React enhances performance and makes it easier to create intricate online applications.

● Back-End Programming:
       1. Node.js: Allows JavaScript to be run on the server side, providing the ability to use a single programming language across both the front-end and back-end.
       2. Database Management: Backend programming entails storing and retrieving data via databases. Using query languages like SQL (Structured Query Language) or NoSQL databases, developers can communicate with databases. They guarantee data security and integrity, optimize queries and design and execute database structures.
      3. APIs (Application Programming Interfaces): APIs are created by backend developers to facilitate communication between a web application's frontend and backend parts. APIs specify the rules and protocols that allow various software components to communicate and exchange data. GraphQL and restful APIs are two popular API protocols.

UI DESIGN: 



SAMPLE CODING:

1.App.js
import React, { useEffect, useState } from 'react'
import './App.css'; 
import Recipe from './Recipe'; 
const App = () => { 
const APP_ID = <YOUR_APP_ID>; 
const APP_KEY = <YOUR_APP_KEY>; 
const [recipes, setRecipes] = useState([]); 
const [search, setSearch] = useState(""); 
const [query, setQuery] = useState("chicken"); 
useEffect(() => { 
	getRecipes(); 
}, [query]) 
const getRecipes = async () => { 
	const response = await fetch 
	(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`); 
	const data = await response.json(); 
	setRecipes(data.hits); 
}; 
const updateSearch = e => { 
	setSearch(e.target.value); 
}; 
const getSearch = e => { 
	e.preventDefault(); 
	setQuery(search); 
	setSearch(""); 
} 
return ( 
	<div className="App"> 
<form className="search-form" onSubmit={getSearch} > 
		<input className="search-bar" type="text" value={search} onChange={updateSearch} /> 
<button className="search-button" type="submit" > 
Search </button> 
</form> 
	<div className="recipes"> 
		{recipes.map(recipe => ( 
		<Recipe 
			key={recipe.recipe.label} 
			title={recipe.recipe.label} 
			calories={recipe.recipe.calories} 
			image={recipe.recipe.image} 
			ingredients={recipe.recipe.ingredients} /> 
))} 
</div> 
</div> 
); 
} 
export default App;

2.Recipe.js
import React from "react"; 
import style from './recipe.module.css'; 
const Recipe = ({title,calories,image,ingredients}) =>{ 
	return( 
		<div className={style.recipe}> 
			<h1>{title}</h1> 
			<ol> 
				{ingredients.map(ingredient=>( 
					<li>{ingredient.text}</li> 
				))} 
			</ol> 
<p>Calories : {calories}</p> 
<img className={style.image} src={image} alt=""/> 
</div> 
); 
} 
export default Recipe;

3. CSS
.App{ 
min-height: 100vh; 
background-image: linear-gradient(15deg, #13547a 0%, #80d0c7 100%); 
} 
.search-form{ 
min-height: 10vh; 
display: flex; 
justify-content: center; 
align-items: center; 
} 
.search-bar{ 
width: 50%; 
border:none; 
padding: 10px; 
border-radius: 5px; 
box-shadow: 5px 10px #979b91; 
} 
.search-button{ 
background: #4da1ab; 
border: 5px solid white; 
border-radius: 8px; 
padding: 10px 20px; 
color: white; 
font-size: larger; 
margin: 0 0 0 10px; 
} 
.search-button:hover { 
background-color:#fa709a ; 
} 
.recipes{ 
display: flex; 
justify-content: space-around; 
flex-wrap: wrap; 
}


4. Recipr.module.css
@import url('https://fonts.googleapis.com/css2?family=Lobster&display=swap'); 
.recipe{ 
	border-radius: 10px; 
	box-shadow: 0px 5px 20px rgb(63, 60, 60); 
	margin: 20px; 
	display: flex; 
	flex-direction: column; 
	justify-content: space-around; 
	background-image: linear-gradient(to right, 
		#e4afcb 0%, #b8cbb8 0%, #b8cbb8 0%, 
		#e2c58b 30%, #c2ce9c 64%, #7edbdc 100%); 
	align-items: center; 
	min-width: 40%; 
	font-family: 'Lobster', cursive; 
} 
.image{ 
	border-radius: 10px; 
	margin:0px 0px 20px 0px; 
}





CONCLUSION:

In conclusion, the Food Recipe React.js project exemplifies the powerful capabilities of React.js in building dynamic and user-friendly web applications. This project not only highlights the seamless integration of various React components but also underscores the importance of a well-structured and responsive user interface in enhancing the user experience. The application's ability to fetch, display, and manage recipe data efficiently demonstrates the practical use of state management and API interactions in React. 

Furthermore, this project underscores the growing importance of digital solutions in the culinary world, making recipes more accessible and customizable for users. It bridges the gap between technology and cooking, providing an interactive platform for users to explore and create diverse culinary delights. Ultimately, this project showcases how React.js can be leveraged to create functional and engaging web applications that meet modern user expectations and needs in the food and recipe domain.
